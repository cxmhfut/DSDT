package com.zy.dsdt.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table USER_CLASS.
*/
public class UserClassDao extends AbstractDao<UserClass, String> {

    public static final String TABLENAME = "USER_CLASS";

    /**
     * Properties of entity UserClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cno = new Property(0, String.class, "cno", true, "CNO");
        public final static Property Cname = new Property(1, String.class, "cname", false, "CNAME");
        public final static Property Cschool = new Property(2, String.class, "cschool", false, "CSCHOOL");
        public final static Property Cteacher = new Property(3, String.class, "cteacher", false, "CTEACHER");
    };


    public UserClassDao(DaoConfig config) {
        super(config);
    }
    
    public UserClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_CLASS' (" + //
                "'CNO' TEXT PRIMARY KEY NOT NULL ," + // 0: cno
                "'CNAME' TEXT," + // 1: cname
                "'CSCHOOL' TEXT," + // 2: cschool
                "'CTEACHER' TEXT);"); // 3: cteacher
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_CLASS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserClass entity) {
        stmt.clearBindings();
 
        String cno = entity.getCno();
        if (cno != null) {
            stmt.bindString(1, cno);
        }
 
        String cname = entity.getCname();
        if (cname != null) {
            stmt.bindString(2, cname);
        }
 
        String cschool = entity.getCschool();
        if (cschool != null) {
            stmt.bindString(3, cschool);
        }
 
        String cteacher = entity.getCteacher();
        if (cteacher != null) {
            stmt.bindString(4, cteacher);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserClass readEntity(Cursor cursor, int offset) {
        UserClass entity = new UserClass( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cno
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cschool
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // cteacher
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserClass entity, int offset) {
        entity.setCno(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCschool(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCteacher(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserClass entity, long rowId) {
        return entity.getCno();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserClass entity) {
        if(entity != null) {
            return entity.getCno();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
