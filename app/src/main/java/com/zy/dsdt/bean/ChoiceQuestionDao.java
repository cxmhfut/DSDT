package com.zy.dsdt.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CHOICE_QUESTION.
*/
public class ChoiceQuestionDao extends AbstractDao<ChoiceQuestion, String> {

    public static final String TABLENAME = "CHOICE_QUESTION";

    /**
     * Properties of entity ChoiceQuestion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Chno = new Property(0, String.class, "chno", true, "CHNO");
        public final static Property Chstem = new Property(1, String.class, "chstem", false, "CHSTEM");
        public final static Property Chanalysis = new Property(2, String.class, "chanalysis", false, "CHANALYSIS");
        public final static Property Chchapter = new Property(3, Integer.class, "chchapter", false, "CHCHAPTER");
        public final static Property Chanswer = new Property(4, Integer.class, "chanswer", false, "CHANSWER");
        public final static Property ChA = new Property(5, String.class, "chA", false, "CH_A");
        public final static Property ChB = new Property(6, String.class, "chB", false, "CH_B");
        public final static Property ChC = new Property(7, String.class, "chC", false, "CH_C");
        public final static Property ChD = new Property(8, String.class, "chD", false, "CH_D");
    };


    public ChoiceQuestionDao(DaoConfig config) {
        super(config);
    }
    
    public ChoiceQuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHOICE_QUESTION' (" + //
                "'CHNO' TEXT PRIMARY KEY NOT NULL ," + // 0: chno
                "'CHSTEM' TEXT," + // 1: chstem
                "'CHANALYSIS' TEXT," + // 2: chanalysis
                "'CHCHAPTER' INTEGER," + // 3: chchapter
                "'CHANSWER' INTEGER," + // 4: chanswer
                "'CH_A' TEXT," + // 5: chA
                "'CH_B' TEXT," + // 6: chB
                "'CH_C' TEXT," + // 7: chC
                "'CH_D' TEXT);"); // 8: chD
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHOICE_QUESTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChoiceQuestion entity) {
        stmt.clearBindings();
 
        String chno = entity.getChno();
        if (chno != null) {
            stmt.bindString(1, chno);
        }
 
        String chstem = entity.getChstem();
        if (chstem != null) {
            stmt.bindString(2, chstem);
        }
 
        String chanalysis = entity.getChanalysis();
        if (chanalysis != null) {
            stmt.bindString(3, chanalysis);
        }
 
        Integer chchapter = entity.getChchapter();
        if (chchapter != null) {
            stmt.bindLong(4, chchapter);
        }
 
        Integer chanswer = entity.getChanswer();
        if (chanswer != null) {
            stmt.bindLong(5, chanswer);
        }
 
        String chA = entity.getChA();
        if (chA != null) {
            stmt.bindString(6, chA);
        }
 
        String chB = entity.getChB();
        if (chB != null) {
            stmt.bindString(7, chB);
        }
 
        String chC = entity.getChC();
        if (chC != null) {
            stmt.bindString(8, chC);
        }
 
        String chD = entity.getChD();
        if (chD != null) {
            stmt.bindString(9, chD);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChoiceQuestion readEntity(Cursor cursor, int offset) {
        ChoiceQuestion entity = new ChoiceQuestion( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // chno
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chstem
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chanalysis
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // chchapter
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // chanswer
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // chA
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // chB
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // chC
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // chD
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChoiceQuestion entity, int offset) {
        entity.setChno(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChstem(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChanalysis(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChchapter(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setChanswer(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setChA(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChB(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChC(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChD(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ChoiceQuestion entity, long rowId) {
        return entity.getChno();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ChoiceQuestion entity) {
        if(entity != null) {
            return entity.getChno();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
