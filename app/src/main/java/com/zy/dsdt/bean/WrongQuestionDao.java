package com.zy.dsdt.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table WRONG_QUESTION.
*/
public class WrongQuestionDao extends AbstractDao<WrongQuestion, String> {

    public static final String TABLENAME = "WRONG_QUESTION";

    /**
     * Properties of entity WrongQuestion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Qno = new Property(0, String.class, "qno", true, "QNO");
        public final static Property Uno = new Property(1, String.class, "uno", false, "UNO");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
    };


    public WrongQuestionDao(DaoConfig config) {
        super(config);
    }
    
    public WrongQuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WRONG_QUESTION' (" + //
                "'QNO' TEXT PRIMARY KEY NOT NULL ," + // 0: qno
                "'UNO' TEXT," + // 1: uno
                "'TYPE' INTEGER);"); // 2: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WRONG_QUESTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WrongQuestion entity) {
        stmt.clearBindings();
 
        String qno = entity.getQno();
        if (qno != null) {
            stmt.bindString(1, qno);
        }
 
        String uno = entity.getUno();
        if (uno != null) {
            stmt.bindString(2, uno);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WrongQuestion readEntity(Cursor cursor, int offset) {
        WrongQuestion entity = new WrongQuestion( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // qno
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uno
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WrongQuestion entity, int offset) {
        entity.setQno(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUno(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(WrongQuestion entity, long rowId) {
        return entity.getQno();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(WrongQuestion entity) {
        if(entity != null) {
            return entity.getQno();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
