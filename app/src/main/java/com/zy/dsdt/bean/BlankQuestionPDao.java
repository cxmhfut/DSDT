package com.zy.dsdt.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table BLANK_QUESTION_P.
*/
public class BlankQuestionPDao extends AbstractDao<BlankQuestionP, String> {

    public static final String TABLENAME = "BLANK_QUESTION_P";

    /**
     * Properties of entity BlankQuestionP.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Bno = new Property(0, String.class, "bno", true, "BNO");
        public final static Property Bstem = new Property(1, String.class, "bstem", false, "BSTEM");
        public final static Property Bsanalysis = new Property(2, String.class, "bsanalysis", false, "BSANALYSIS");
        public final static Property Bchapter = new Property(3, Integer.class, "bchapter", false, "BCHAPTER");
        public final static Property Banswers = new Property(4, String.class, "banswers", false, "BANSWERS");
    };


    public BlankQuestionPDao(DaoConfig config) {
        super(config);
    }
    
    public BlankQuestionPDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BLANK_QUESTION_P' (" + //
                "'BNO' TEXT PRIMARY KEY NOT NULL ," + // 0: bno
                "'BSTEM' TEXT," + // 1: bstem
                "'BSANALYSIS' TEXT," + // 2: bsanalysis
                "'BCHAPTER' INTEGER," + // 3: bchapter
                "'BANSWERS' TEXT);"); // 4: banswers
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BLANK_QUESTION_P'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BlankQuestionP entity) {
        stmt.clearBindings();
 
        String bno = entity.getBno();
        if (bno != null) {
            stmt.bindString(1, bno);
        }
 
        String bstem = entity.getBstem();
        if (bstem != null) {
            stmt.bindString(2, bstem);
        }
 
        String bsanalysis = entity.getBsanalysis();
        if (bsanalysis != null) {
            stmt.bindString(3, bsanalysis);
        }
 
        Integer bchapter = entity.getBchapter();
        if (bchapter != null) {
            stmt.bindLong(4, bchapter);
        }
 
        String banswers = entity.getBanswers();
        if (banswers != null) {
            stmt.bindString(5, banswers);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BlankQuestionP readEntity(Cursor cursor, int offset) {
        BlankQuestionP entity = new BlankQuestionP( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bno
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bstem
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bsanalysis
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // bchapter
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // banswers
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BlankQuestionP entity, int offset) {
        entity.setBno(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBstem(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBsanalysis(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBchapter(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBanswers(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BlankQuestionP entity, long rowId) {
        return entity.getBno();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BlankQuestionP entity) {
        if(entity != null) {
            return entity.getBno();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
