package com.zy.dsdt.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uno = new Property(0, String.class, "uno", true, "UNO");
        public final static Property Uname = new Property(1, String.class, "uname", false, "UNAME");
        public final static Property Upassword = new Property(2, String.class, "upassword", false, "UPASSWORD");
        public final static Property Uclass = new Property(3, String.class, "uclass", false, "UCLASS");
        public final static Property Uclassname = new Property(4, String.class, "uclassname", false, "UCLASSNAME");
        public final static Property Uschool = new Property(5, String.class, "uschool", false, "USCHOOL");
        public final static Property Uteacher = new Property(6, String.class, "uteacher", false, "UTEACHER");
        public final static Property Upermission = new Property(7, Integer.class, "upermission", false, "UPERMISSION");
        public final static Property Ucredit = new Property(8, Integer.class, "ucredit", false, "UCREDIT");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'UNO' TEXT PRIMARY KEY NOT NULL ," + // 0: uno
                "'UNAME' TEXT," + // 1: uname
                "'UPASSWORD' TEXT," + // 2: upassword
                "'UCLASS' TEXT," + // 3: uclass
                "'UCLASSNAME' TEXT," + // 4: uclassname
                "'USCHOOL' TEXT," + // 5: uschool
                "'UTEACHER' TEXT," + // 6: uteacher
                "'UPERMISSION' INTEGER," + // 7: upermission
                "'UCREDIT' INTEGER);"); // 8: ucredit
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String uno = entity.getUno();
        if (uno != null) {
            stmt.bindString(1, uno);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(2, uname);
        }
 
        String upassword = entity.getUpassword();
        if (upassword != null) {
            stmt.bindString(3, upassword);
        }
 
        String uclass = entity.getUclass();
        if (uclass != null) {
            stmt.bindString(4, uclass);
        }
 
        String uclassname = entity.getUclassname();
        if (uclassname != null) {
            stmt.bindString(5, uclassname);
        }
 
        String uschool = entity.getUschool();
        if (uschool != null) {
            stmt.bindString(6, uschool);
        }
 
        String uteacher = entity.getUteacher();
        if (uteacher != null) {
            stmt.bindString(7, uteacher);
        }
 
        Integer upermission = entity.getUpermission();
        if (upermission != null) {
            stmt.bindLong(8, upermission);
        }
 
        Integer ucredit = entity.getUcredit();
        if (ucredit != null) {
            stmt.bindLong(9, ucredit);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uno
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // upassword
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uclass
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // uclassname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uschool
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // uteacher
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // upermission
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // ucredit
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUno(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUclass(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUclassname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUschool(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUteacher(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpermission(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUcredit(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getUno();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getUno();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
